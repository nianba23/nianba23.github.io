import{_ as l,o as i,c as a,R as t}from"./chunks/framework.oNtUbm1h.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"guild/index.md","filePath":"guild/index.md"}'),e={name:"guild/index.md"},o=t('<h2 id="文档" tabindex="-1">文档 <a class="header-anchor" href="#文档" aria-label="Permalink to &quot;文档&quot;">​</a></h2><p>文档中心，把梳理好的文档贡献到这边</p><h3 id="如何明白的做事情" tabindex="-1">如何明白的做事情 <a class="header-anchor" href="#如何明白的做事情" aria-label="Permalink to &quot;如何明白的做事情&quot;">​</a></h3><p>除了扎实的专业技能外，‘做明白事情’的能力更重要，有效的干活比加班更有效。</p><p>早期的互联网，技术出身者占据名门正派之位，‘一个技术解决一个需求，一个需求让人记住 APP，用的习惯后经久不变’。他们通常思想单纯、务实低调、专注研发本身、爱用就用不爱用走。</p><p><strong>什么是工程师</strong></p><ul><li>一个通过科学或技术知识解决问题的<strong>专业人员</strong></li><li>掌握专业的知识和技能，并具备<strong>创新能力和解决问题</strong>的能力</li></ul><p>努力&amp;自信的定位：</p><ul><li>不是码农</li><li>不是资源</li><li>是一个有专业技能的脑力工作者</li></ul><p><strong>什么是明白的做事情</strong></p><ul><li>事情本身被人理解得很清楚、没有疑惑、不懵逼</li><li>执行过程中对内容、步骤、条件有清晰的认识，做起来一气呵成</li></ul><h4 id="理清楚、讲明白、做到位" tabindex="-1">理清楚、讲明白、做到位 <a class="header-anchor" href="#理清楚、讲明白、做到位" aria-label="Permalink to &quot;理清楚、讲明白、做到位&quot;">​</a></h4><p>当理清楚了问题是什么？为什么出现？怎么做？之后做的过程会很有逻辑</p><h5 id="如何理清楚问题" tabindex="-1">如何理清楚问题 <a class="header-anchor" href="#如何理清楚问题" aria-label="Permalink to &quot;如何理清楚问题&quot;">​</a></h5><ol><li>最原始的需求/问题是什么？</li><li>为什么要解决这个问题？不解决会有什么影响？</li><li>问题发生的根本原因是什么？</li><li>这个需求/问题的定义对于其他人能否听得懂？</li></ol><p><strong>拆解问题的思维模型</strong></p><ul><li>MECE 分解法：相互独立，完全穷尽的分解出最小问题（分类）</li><li>归因回溯发：通过不断地反推追问，找到深层的原因（假设）</li><li>5W2H：what、who、where、when、why、how、how much（角度）</li></ul><p>MECE 分解法：</p><p>用于将一个大问题拆分成若干个互斥且集合完备的小问题，方便清晰简单的解决</p><ul><li>二分法：找一个纬度，分成 2 个部分，如中文/英文</li><li>过程法：事情发展的时间顺序、流程、程序，如 SOP</li><li>要素法：根据事物的重要性进行划分，如是否影响用户</li><li>公式法：运用简单数学公式，如耗时 = 前端+传输+接口</li><li>矩阵法：将一个事物拆分成 4 个象限，如重要紧急</li></ul><p>归因回溯发：</p><p>一种通过逐步排查和分析多个可能的原因，寻找事件真正的原因的方法。从事件发生后的结果入手，逆序推断，最终找到真正原因</p><p>例如：一个客户端稳定性数据下降了 30%，如何找到问题？ 是不是系统原因 -&gt; 是不是网络问题 -&gt; 是不是设备原因 -&gt; 是不是应用原因 -&gt; ...</p><p>5W2H 法：</p><p>在计划做一个产品的时候，用这个方法来明确需求痛点。用自问自答的方式发觉问题深层次的原因</p><p><strong>如何判断问题理清楚了</strong></p><ul><li>还有没有懵逼的地方？</li><li>还有没有没有考虑到的点？</li><li>已经完全没有问题困扰了嘛？</li><li>无论别人怎么提问，基本上可以应答</li></ul><h5 id="如何讲明白事情" tabindex="-1">如何讲明白事情 <a class="header-anchor" href="#如何讲明白事情" aria-label="Permalink to &quot;如何讲明白事情&quot;">​</a></h5><p>如何讲明白事情，即如何让其他人也很清楚这个事情</p><p><strong>写一个明白的文档</strong></p><ul><li>组织结构有逻辑：标题、副标题、段落分组、脑图先行</li><li>简单接地气地表达：清晰易理解的描述，有逻辑、看得懂</li><li>恰当的例子：实际或模拟的 case，demo、流程图</li></ul><p>如何判断写明白了？别人看着文档，也就可以直接写代码了</p><p>RFC： request for comments，一种指导制定互联网标准的文档格式</p><ol><li>明确读者是谁，文档目的，使用范围</li><li>描述问题的背景和相关的已有解决方案</li><li>对解决方案详细阐述，有清晰的逻辑推理和可实现的细节</li><li>未解决的问题以及未来可能性的说明</li></ol><p>讲明白事情常用模型-STAR：</p><ul><li>situation：遇到的具体情景</li><li>task：需要解决的问题或任务</li><li>action：采取的行动和实施的过程</li><li>result：采取行动的结果</li></ul><p>出现问题回复-SCQA</p><ul><li>situation：有实际会熟悉的情景引入</li><li>complication：实际情况和现有的要求有冲突</li><li>question：出现问题怎么办</li><li>answer：回答出解决方案是什么</li></ul><h5 id="如何做到位事情" tabindex="-1">如何做到位事情 <a class="header-anchor" href="#如何做到位事情" aria-label="Permalink to &quot;如何做到位事情&quot;">​</a></h5><ul><li>专业技能</li><li>能讲明白事情</li><li>能解决各种问题</li><li>有完成事情的 PM 能力</li><li>不断学习</li><li>...</li></ul>',40),r=[o];function n(p,s,u,h,d,c){return i(),a("div",null,r)}const m=l(e,[["render",n]]);export{g as __pageData,m as default};
