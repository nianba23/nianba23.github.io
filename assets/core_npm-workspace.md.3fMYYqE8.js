import{_ as s,o as a,c as e,R as p}from"./chunks/framework.oNtUbm1h.js";const m=JSON.parse('{"title":"npm workspaces 教程","description":"","frontmatter":{},"headers":[],"relativePath":"core/npm-workspace.md","filePath":"core/npm-workspace.md"}'),n={name:"core/npm-workspace.md"},o=p(`<h1 id="npm-workspaces-教程" tabindex="-1">npm workspaces 教程 <a class="header-anchor" href="#npm-workspaces-教程" aria-label="Permalink to &quot;npm workspaces 教程&quot;">​</a></h1><p>npm workspaces 是 npm@7 版本引入的一个特性，使用时请确认自己的版本，node &gt;= 16</p><p>workspaces 可以帮助我们来进行多包管理，它可以让多个 npm 包在同一个项目中进行开发和管理变得非常方便：</p><ul><li>将子包中所有的依赖包都提升到根目录中进行安装，提升包安装的速度</li><li>初始化后会自动将子包之间的依赖进行关联（软链接）</li><li>因为同一个项目的关系，所以可以让各个子包共享一些流程，比如：eslint、stylelint、git hooks、publish flow 等</li></ul><h2 id="workspaces-文档" tabindex="-1">workspaces 文档 <a class="header-anchor" href="#workspaces-文档" aria-label="Permalink to &quot;workspaces 文档&quot;">​</a></h2><p><a href="https://docs.npmjs.com/cli/v7/using-npm/workspaces" target="_blank" rel="noreferrer">官方文档</a></p><h2 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h2><ol><li><p>在项目根目录下的 <code>package.json</code> 中配置 <code>workspaces</code> workspaces 数组里面填写相对根目录的文件夹名称或者是通配符，例如示例中表示位于 <code>packages</code> 内的所有文件夹都被视为工作区，只要里面包含有效的 <code>package.json</code></p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;workspaces&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;packages/*&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><p>运行 <code>npm install</code>，<code>./packages</code> 内的所有包都将创建符号链接到当前目录的 <code>node_modules</code> 文件夹里，对于包的使用和查找，和正常安装的 npm 包相同。</p></li><li><p>在 <code>packages</code> 目录下创建相应的子包，每个子包都有自己的 <code>package.json</code> 并且需要配置 <code>name</code> 字段，因为 npm 包的名字是唯一的，如果没有配置 name 字段，那么 npm 会报错，还因为在执行指令时通过 name 查找到相应的子包。</p><p>也可以使用 <code>npm init</code> 自动定义新工作区，如果不存在文件夹 <code>myPackage</code>，会自动创建且生成 <code>package.json</code> 文件。同时在根目录的 <code>package.json</code> 中添加 <code>workspaces</code> 字段</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm init -w ./packages/myPackage -y</span></span></code></pre></div></li><li><p>安装依赖 在根目录执行时会安装根目录下所有包的依赖</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm install</span></span></code></pre></div><p>在子包中安装依赖时指定包名</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm install repoName -w myPackage</span></span></code></pre></div></li><li><p>运行命令 如果要在子包中运行脚本</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm run muScript -w myPackage</span></span></code></pre></div><p>如果要在所有工作区中运行相同的脚本</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm run muScript</span></span></code></pre></div></li><li><p>发布包 发布子包</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm publish -w myPackage</span></span></code></pre></div><p>发布所有子包</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm publish</span></span></code></pre></div></li><li><p>其他常见操作 使用 <code>npm ls</code> 查看所有工作区中的包。 使用 <code>npm outdated</code> 查看工作区中的包是否有过时的依赖项。</p></li></ol><p>其他操作请参考官方文档</p>`,9),i=[o];function c(t,l,d,r,h,k){return a(),e("div",null,i)}const u=s(n,[["render",c]]);export{m as __pageData,u as default};
