import{_ as t,D as o,o as l,c as r,b as s,w as i,a4 as n,R as a,I as _,a as c}from"./chunks/framework.oNtUbm1h.js";const b=JSON.parse('{"title":"前端开发规范","description":"","frontmatter":{},"headers":[],"relativePath":"core/开发规范.md","filePath":"core/开发规范.md"}'),u={name:"core/开发规范.md"},d=a('<h1 id="前端开发规范" tabindex="-1">前端开发规范 <a class="header-anchor" href="#前端开发规范" aria-label="Permalink to &quot;前端开发规范&quot;">​</a></h1><h2 id="前端工程化" tabindex="-1">前端工程化 <a class="header-anchor" href="#前端工程化" aria-label="Permalink to &quot;前端工程化&quot;">​</a></h2><h3 id="前端工程化问题" tabindex="-1">前端工程化问题： <a class="header-anchor" href="#前端工程化问题" aria-label="Permalink to &quot;前端工程化问题：&quot;">​</a></h3><ol><li>团队成员的编码规范、编码风格不统一，导致代码风格迥异，阅读、协作难度加大</li><li>团队协作的规范、环境、仓库、模块和文档等基建措施缺失或不完善，导致新成员无从下手</li><li>构建配置、打包配置、公共组件、工具函数等代码片段，不同模块或不同项目无法复用</li><li>随着需求迭代，项目结构与工程文件不断变化，处理不当项目难以维护，甚至最终走向重构</li></ol><h3 id="前端工程化-1" tabindex="-1">前端工程化： <a class="header-anchor" href="#前端工程化-1" aria-label="Permalink to &quot;前端工程化：&quot;">​</a></h3><p>前端工程化是指在前端开发过程中，通过工程化的方法和工具来提高开发效率、保证代码质量、提升用户体验，并实现项目快速迭代和持续交付的一种实践。 它具备<strong>模块化、组件化、规范化、自动化</strong>四大特性，主要目的就是为了降低成本与提升效率。</p>',6),h=a('<ul><li><strong>模块化</strong>是前端工程化的重中之重，<strong>表现上就是在文件层面上拆分、组件代码与资源</strong>。具体来说就是将一个大文件拆分为相互依赖的小文件，再统一拼装与加载。 也指将一个复杂应用根据预设规范封装为多个块并组合起来，对内实现数据私有化，对外暴露接口与其它模块通信。有了模块化才能保证多人协作开发，功能复用。</li><li><strong>组件化</strong>是前端工程化的重要基础，<strong>着重在功能层面上拆分、组装交互与设计</strong>，具体就是将一个具备通用功能的交互设计划分为<strong>模板、样式和逻辑</strong>组成的功能单元，提升代码复用和开发效率。 模块化是在文件层面上对代码或资源的拆分；而组件化是在功能层面，对 UI、逻辑的拆分。 <strong>高内聚低耦合的特点</strong>不仅利于单元测试的进行，同样也利于需求迭代的推进</li><li><strong>规范化</strong>是前端工程化的另一重要部分，模块化和组件化确定了开发模型，而这些的实现就需要规范去落实。规范化主要作用是将松散的规范通过置顶标注凝聚在一起，将所有工作流程标准化。包括代码规范、提交规范等。 项目初期规范定制的好坏，会直接影响到后期的开发质量、开发效率。</li><li>自动化指将一列繁琐重复的工序交友预设的脚本自定处理，整个工作流程无需人工参与。 例如自动化构建、自动化测试、自动化打包、自动化发布与自动化部署。</li></ul><p>前端工程化不是某个具体的工具，而是对项目整体架构与规划，使得能在未来可判时间内动态规划项目的走向。</p><h3 id="实施" tabindex="-1">实施 <a class="header-anchor" href="#实施" aria-label="Permalink to &quot;实施&quot;">​</a></h3><p>前端工程化在团队实施有一定难度，前期必然会多花时间，牺牲一些效率，但后期带来的收益绝对值得。</p><ol><li>项目启动与规划 <ul><li>项目评审</li><li>项目成员</li><li>技术选型</li></ul></li><li>制定开发规范 <ul><li>编码规范：制定代码风格、命名规范等</li><li>组件设计原则：定义组件的指责、状态管理、交互方式等</li><li>代码审查：确保代码质量</li></ul></li><li>配置构建工具 <ul><li>选择构建工具</li><li>配置构建流程</li></ul></li><li>模块化与组件化开发 <ul><li>模块划分：根据功能划分模块、实现模块间的低耦合</li><li>组件库构建：开发可复用的 UI 通用组件库或通用业务组件库</li></ul></li><li>版本控制与文档 <ul><li>版本控制：统一代码、制定提交规范</li><li>文档编写：开发文档、API 文档、用户手册等</li></ul></li><li>自动化测试 <ul><li>单元测试：代码的独立功能正确</li><li>集成测试：模块间的交互正确</li><li>端到端测试：使用Cypress等工具进行端到端测试</li></ul></li><li>性能优化 <ul><li>代码优化：较少冗余，提高执行效率</li><li>资源优化：优化资源的加载和使用</li><li>性能监控：使用性能监控工具，持续跟踪应用性能</li></ul></li><li>CICD <ul><li>CICD工具</li><li>自动化流程</li></ul></li><li>监控与反馈 <ul><li>错误跟踪</li><li>性能监控</li><li>用户反馈</li></ul></li><li>协作与沟通 <ul><li>其他管理工具</li><li>沟通机制</li></ul></li></ol>',5);function m(A,p,E,g,C,f){const e=o("Mermaid");return l(),r("div",null,[d,(l(),s(n,null,{default:i(()=>[_(e,{id:"mermaid-37",class:"mermaid",graph:"mindmap%0A%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%0A%20%20%E6%A8%A1%E5%9D%97%E5%8C%96%0A%20%20%E7%BB%84%E4%BB%B6%E5%8C%96%0A%20%20%E8%A7%84%E8%8C%83%E5%8C%96%0A%20%20%E8%87%AA%E5%8A%A8%E5%8C%96%0A"})]),fallback:i(()=>[c(" Loading... ")]),_:1})),h])}const P=t(u,[["render",m]]);export{b as __pageData,P as default};
