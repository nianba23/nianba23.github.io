import{_ as e,o,c as a,R as t}from"./chunks/framework.oNtUbm1h.js";const _=JSON.parse('{"title":"探讨 web-components 的正确使用姿势","description":"","frontmatter":{},"headers":[],"relativePath":"guild/components/web-components/index.md","filePath":"guild/components/web-components/index.md"}'),n={name:"guild/components/web-components/index.md"},c=t('<h1 id="探讨-web-components-的正确使用姿势" tabindex="-1">探讨 web-components 的正确使用姿势 <a class="header-anchor" href="#探讨-web-components-的正确使用姿势" aria-label="Permalink to &quot;探讨 web-components 的正确使用姿势&quot;">​</a></h1><h2 id="web-components-是什么" tabindex="-1">web-components 是什么？ <a class="header-anchor" href="#web-components-是什么" aria-label="Permalink to &quot;web-components 是什么？&quot;">​</a></h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Web_Components" target="_blank" rel="noreferrer">Web Components</a> 是一组 Web 原生 API 的总称，允许开发人员创建可重用的自定义组件，并在 web 中像使用原生 HTML 标签一样使用。 目前已有很多前端框架/库支持 web components。</p><h2 id="可以替代现代-ui-框架吗" tabindex="-1">可以替代现代 UI 框架吗？ <a class="header-anchor" href="#可以替代现代-ui-框架吗" aria-label="Permalink to &quot;可以替代现代 UI 框架吗？&quot;">​</a></h2><p>封装自定义元素，听着很熟悉，似乎解决了前端开发必须使用 <code>vue</code>、 <code>react</code> 等 UI 框架来实现代码复用的问题。</p><p>但是我们使用 UI 框架已经不再是纯粹的为了<code>组件复用</code>。我们更离不开的是声明式（数据驱动）的开发方式，以及 UI 框架的一系列周边生态带来的开发便捷。</p><p>我们享受着 UI 框架带来的 <code>现代式</code> 开发，虽然他不是 web 标准，但是声明式的开发方式几乎已经成为了现代 web 前端的事实标准。</p><p>而 <code>web components</code> 可以看作只是丰富了 HTML 的原生标签。所以它无法和 <code>vue</code> <code>react</code> 等做一个正面比较，更别说 <code>web components</code> 的出现会取代它们。</p><h2 id="它适用于什么样的场景" tabindex="-1">它适用于什么样的场景？ <a class="header-anchor" href="#它适用于什么样的场景" aria-label="Permalink to &quot;它适用于什么样的场景？&quot;">​</a></h2><p>UI 组件库！当你希望你的 UI 组件可以在任何框架上运行（包括原生），那么使用 <code>web components</code> 可以达到目的。</p><p>由于它只是拓展了 HTML 的原生标签，所以可以像使用 <code>div</code> 标签一样的方式来使用它。这样可以拓展你的 UI 组件库的受众。无论开发者使用的是 <code>vue</code> 还是 <code>react</code> 都可以调用你的组件，当然包括原生开发。</p><h2 id="核心-api" tabindex="-1">核心 API <a class="header-anchor" href="#核心-api" aria-label="Permalink to &quot;核心 API&quot;">​</a></h2><ul><li>custom elements 自定义元素：用来定义‘自定义元素’及其‘行为’，对外提供组件的标签</li><li>shadow DOM 影子：用来封装组件内部的结构，避免与外部冲突</li><li>HTML templates HTML 模板：包括 template 和 slot 元素，可以定义各种组件的 HTML 模板，然后被复用到其他地方</li></ul><p>HTML imports 目前已废弃</p><h2 id="入门示例" tabindex="-1">入门示例 <a class="header-anchor" href="#入门示例" aria-label="Permalink to &quot;入门示例&quot;">​</a></h2>',15),d=[c];function r(s,i,p,l,m,h){return o(),a("div",null,d)}const u=e(n,[["render",r]]);export{_ as __pageData,u as default};
