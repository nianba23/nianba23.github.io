import{_ as l,o as i,c as e,R as a}from"./chunks/framework.oNtUbm1h.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"core/index.md","filePath":"core/index.md"}'),t={name:"core/index.md"},r=a('<h2 id="文档" tabindex="-1">文档 <a class="header-anchor" href="#文档" aria-label="Permalink to &quot;文档&quot;">​</a></h2><h4 id="为什么要写高质量的代码" tabindex="-1">为什么要写高质量的代码 <a class="header-anchor" href="#为什么要写高质量的代码" aria-label="Permalink to &quot;为什么要写高质量的代码&quot;">​</a></h4><p>在业务开发中，经常出现一种情形，在项目初期快速地实现业务需求，但随着时间推移，添加新功能的速度逐渐减慢，需要花费更多的时间去思考如何将新功能塞进现有的代码中，不断关联蹦出来的 bug 修复起来也越来越复杂。代码库就是在不断地打补丁。</p><p>高质量的代码通常更易于理解和修改，这可以减少在维护和迭代时所需的时间和精力。 高质量的代码通常更易于复用和扩展，这可以更快地开发新的功能和应用。 高质量的前端代码通常意味着更少的错误，更快的加载速度，更好的响应性，提升用户体验。</p><p>写代码和写文章一样，首先保证的是<strong>功能可用</strong>，然后能够表达出业务的含义。其次也要追求形式上的优雅，编码规范就是对代码的组织形式与风格的一种约束。好的代码不仅功能稳定、逻辑清晰、风格一致，理想情况无论多少人参与都如同一个人在编码。</p><h4 id="什么是高质量的代码" tabindex="-1">什么是高质量的代码 <a class="header-anchor" href="#什么是高质量的代码" aria-label="Permalink to &quot;什么是高质量的代码&quot;">​</a></h4><p><strong>有良好的可读性，代码易于理解</strong>。如使用清楚的命名、保持函数和方法简短、使用注释。应该尽可能地简介、避免不必要的复杂性和冗余。同一项目中，代码风格一致。 <strong>可维护性高，代码易于修改和扩展</strong>。这通常意味着代码应该遵循某种设计模式，避免过度复杂的依赖关系，并且有良好的模块化。好的代码应该是直观的，当有人需要修改时，能够迅速找到要修改的部分进行快速更改，同时也减少查找上下文关联的时间，而且不容易引入新的问题。 <strong>健壮性有考量，边界场景有覆盖和处理</strong>。应能够处理各种预期和未预期的输入情况，并在出问题时优雅地失败。遵循最佳的安全实践，避免可能的安全漏洞。 <strong>高效运行，提供良好的用户体验</strong>。较少的资源文件数量和大小，合理的数据结构和算法，减少CPU时间、内存使用和磁盘I/O。</p><h3 id="如何编写高质量的代码" tabindex="-1">如何编写高质量的代码 <a class="header-anchor" href="#如何编写高质量的代码" aria-label="Permalink to &quot;如何编写高质量的代码&quot;">​</a></h3><p><strong>工程师的编码素养</strong></p><p>编程不仅是如何编写出能够运行的代码，更是关于如何编写出优雅高效、易于维护的代码。这不仅涉及到技术层面，更是关于思维方式、解决问题的策略、以及对于质量和细节的追求。优秀的编码，既要考虑到功能和效率，也要考虑到美感和人性化。 前端开发设计到许多不同的技术和工具，如果开发者对这些技术和工具的理解不够透彻，或者缺乏必要的编程 ，可能会难以编写高质量的代码。在协同上，也尝尝需要在项目的里程碑节点和有限的资源中寻找平衡。所以是对专业技能和软素质的双重考验。 建立一套有效的前端团队研发规范，对于提高开发效率、保证代码质量、促进团队协作，以及满足业务和用户需求，具有重要的意义。前端团队研发规范不仅包括编码规范，也包括开发流程规范、代码审查规范、安全和性能规范等。这些规范应该反映出对质量、效率、协作和持续迭代的追求。</p><h3 id="部分编码习惯" tabindex="-1">部分编码习惯 <a class="header-anchor" href="#部分编码习惯" aria-label="Permalink to &quot;部分编码习惯&quot;">​</a></h3><p>先从形成良好的编码习惯开始，注重编程的基本素养和要求。在功能可用的基础上，先写出可读性、可维护性高的代码。再逐步提升专业技能，写出健壮、高效、交互优异的代码，对业务公车功能的全生命周期进行把控，负责功能迭代、架构设计、项目重构等。</p><p>仅供参考</p><ol><li>有意义的命名</li></ol><p>一个易于理解的名字可以承载很多信息，某种程度上就是一种更好的注释，一个糟糕的命名，可能会引起别人的误解，对于开发效率和项目质量影响很大。如果遵循一套严格的命名规范，无论是对自己还是接手项目的人，都会大大降低代码的维护成本。 命名规范涵盖的面比较广，一般包括变量或常量名、函数或类名、文件或工程目录名、命名空间名等。把信息装到名字里，从字面意思可以关联其代码用途。名字应该尽量精确、专业、不要多余，不要有误解的名字，及时名称很长。</p><p>1.1 基本要求</p><ul><li>使用准确的单词、专有名词，如 data、JSON</li><li>避免空泛的名字，如 tmp、obj、arr</li><li>用具体的名字代替抽象的名字，如 thisState -&gt; orderState</li><li>使用前缀或后缀来补充更多信息，如 setPageSize</li><li>合理的名字长度，为作用域大的名字采用更长的名字</li><li>合理的格式来表达含义，有目的地使用大小驼峰、下划线等</li><li>统一范式命名，如 get、query、handle、is、on 等</li></ul><p>1.2 部分不规范的命名方式</p><ul><li>单词拼写错误，如 form 写成 from，建议 IDE 开启拼写检查</li><li>中英文混用，如淘宝-taobao，建议都使用英文</li><li>中文缩写，如命名规范mmgf</li><li>以1-9或a-z命名，如 btn1、btn2、btnA、btnB，看似简单但实际读取不到任何信息</li><li>混用命名格式，如订单列表，有的叫 orders，有的叫 order-list，有的叫 orderList</li><li>单复数不分</li></ul><p>1.3 部分命名规范</p><ul><li>变量名使用小驼峰命名，且前缀应当是名词，尽量在名字中体现类型，如length、name 合理的变量命名：maxCount、tableTitle，不合理的变量命名：setCount、getTitle</li><li>常量名使用全部大写字母和下划线组合</li><li>函数名使用小驼峰命名，且前缀应该是动词，常用前缀：can、has、get、load、query、save、update、submit</li><li>类名或构造函数使用大驼峰命名，类的属性和方法的命名跟变量和函数的一致，私有属性和私有方法以下划线开头</li></ul><ol start="2"><li>恰当的注释</li></ol><p>注释是对于代码中 hack 的、隐晦的或重要的地方加一解释。</p><ul><li>有限考虑命名而不是注释</li><li>不要再给不好的命名加注释，如 delete(id) // deleteOrderItemById(id)</li><li>生命高层次的意图而非细节，不要描述显而易见的现象，不用自然语言翻译代码，应当解释代码为什么这么做</li><li>说明可能存在的陷阱，提供总结性注释，难免引入 hack 代码或考虑但未处理的边界场景，此时应为后来者提供标注，一边后续回溯或修复</li></ul><ol start="3"><li>合理地组织代码</li></ol><p>把流程控制变得易读：</p><ul><li>条件语句中变化的值放左边，稳定的值放右边，如 if (length &gt; 10)</li><li>优先处理条件为 true 的逻辑、简单的情况、可疑的情况，如 (err, data) =&gt; { if (err) {} else</li><li>通过提早返回来减少嵌套，如 if (!config) return</li></ul><p>拆分过长的表达式：</p><ul><li>三元表达式只在简单的情况下使用</li><li>优先使用 if/else</li><li>不要滥用短路逻辑（&amp;&amp;、||），部分判断逻辑可以交由后端处理</li><li>使用易懂的临时变量，或封装成函数</li></ul><p>减少引入无谓的变量，减小变量的作用域：</p><ul><li>变量尽量少，太多难以追踪，可去掉不必要的临时变量、中间结果、控制流变量</li><li>缩小变量的作用域，让变量对尽量少的代码可见，防止命名空间污染</li></ul><p>通用逻辑提取与封装：</p><ul><li>对于多次重复使用的值，可提取为定义的变量/常量</li><li>提取重复且通用的函数，以提供更好的可读性、可维护性和复用的可能。需保证一段代码只做一件事，不要盲目提取</li><li>组件的封装，遵循物料规范封装</li></ul><h3 id="工程化编码规范" tabindex="-1">工程化编码规范 <a class="header-anchor" href="#工程化编码规范" aria-label="Permalink to &quot;工程化编码规范&quot;">​</a></h3><ul><li>编码规范</li><li>提交规范</li><li>代码检查工具（源码各规范检查、产物检查、动态检查如覆盖率等指标、代码评分）</li></ul>',35),o=[r];function n(s,d,p,u,h,c){return i(),e("div",null,o)}const g=l(t,[["render",n]]);export{m as __pageData,g as default};
