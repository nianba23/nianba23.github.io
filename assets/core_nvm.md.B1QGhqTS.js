import{_ as e,o as t,c as s,R as n}from"./chunks/framework.oNtUbm1h.js";const u=JSON.parse('{"title":"nvm 教程","description":"","frontmatter":{},"headers":[],"relativePath":"core/nvm.md","filePath":"core/nvm.md"}'),a={name:"core/nvm.md"},o=n(`<h1 id="nvm-教程" tabindex="-1">nvm 教程 <a class="header-anchor" href="#nvm-教程" aria-label="Permalink to &quot;nvm 教程&quot;">​</a></h1><p>nvm 是 Node 版本管理器，可以帮助我们更方便地安装和切换 Node.js 版本。</p><h2 id="windows-安装" tabindex="-1">windows 安装 <a class="header-anchor" href="#windows-安装" aria-label="Permalink to &quot;windows 安装&quot;">​</a></h2><blockquote><p>在安装 nvm 之前，需要先将本地的 node 卸载，避免一些莫名其妙的问题，让 nvm 完全接管电脑的 node。删除包括<code>C:\\Users\\用户名</code>文件夹下的<code>.npmrc</code>，环境变量中 nvm 相关的配置。</p></blockquote><ul><li>Windows <a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noreferrer">nvm-windows</a></li></ul><ol><li>到官网下载 <code>nvm-setup.zip</code> 文件，解压到任意目录，执行 <code>nvm-setup.exe</code> 安装过程中选择 nvm 安装路径和 nodejs 安装路径，如：<code>D:\\Program\\nvm</code>、<code>D:\\Program\\nodejs</code></li><li>安装完成后在命令行终端执行 <code>nvm version</code> 查看是否安装成功，显示版本号说明安装成功 nvm 安装成功会自动配置 nvm 相关的环境变量</li><li>配置淘宝源 找到 nvm 安装路径下的 <code>settings.txt</code> 文件，在文件中添加如下内容：<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>node_mirror: https://npm.taobao.org/mirrors/node/</span></span>
<span class="line"><span>npm_mirror: https://npm.taobao.org/mirrors/npm/</span></span></code></pre></div></li><li>安装 node 在命令行终端执行 <code>nvm list available</code> 可以查看所有可安装的版本 选择一个版本进行安装，安装 node 时会自动安装 npm，如安装 18.17.0 版本：<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>nvm install 18.17.0</span></span></code></pre></div></li><li>使用安装的 node 版本<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>nvm use 18.17.0</span></span></code></pre></div>使用后可以在命令行终端执行 <code>node -v</code> 查看当前使用的 node 版本号 执行 <code>nvm list</code> 可以查看当前已安装的所有 node 版本，如果需要切换到其他版本，只需要执行 <code>nvm use 版本号</code> 即可</li></ol><h3 id="配置全局-npm" tabindex="-1">配置全局 npm <a class="header-anchor" href="#配置全局-npm" aria-label="Permalink to &quot;配置全局 npm&quot;">​</a></h3><p>nvm 管理多个版本的 node，如果每次安装一个 node 版本都要再全局安装一堆包很麻烦，所以需要有一个 npm 可以让每个版本的 node 共用。</p><ol><li>设置使用 npm 下全局安装的包路径 <code>npm config set prefix &quot;D:\\Program\\nvm\\npm&quot;</code></li><li>全局安装 npm 设置全局安装时，不同的 node 版本都是用这个 npm <code>npm install npm -g --registry=https://registry.npm.taobao.org</code> 要更新全局的 npm 的话，先删除全局路径（上一个命令设置的地址，也可以 <code>npm config ls</code> 查看）下的 npm，然后再执行一次这个命令即可</li><li>设置环境变量 在用户变量中添加 <code>NPM_HOME=D:\\Program\\nvm\\npm</code>，path 中添加 <code>%NPM_HOME%</code>（<code>%NPM_HOME%</code> 要添加在 <code>%NVM_SYMLINK%</code> 之前，避免 npm 访问的是 node 自带的 npm 包管理工具）</li></ol><blockquote><p>没有配置 NODE_PATH 环境变量，nodejs 会使用默认的模块解析规则来查找模块。默认情况下，nodejs 会查找当前目录下的 node_modules 文件夹，然后逐级向上查找，知道找到根目录未知。如果全局安装了某个模块，而没有配置 NODE_PATH 环境变量，nodejs 可能无法找到这些全局模块，从而导致模块加载失败。 不过，我们使用 nvm 安装或使用 node 版本时，nvm 会自动设置相关的环境变量，指向全局 npm 下的 node_modules 文件夹，如：&quot;D:\\Program\\nvm\\npm\\node_modules&quot;，所以不需要再配置 NODE_PATH 环境变量。</p></blockquote><h2 id="macos-安装" tabindex="-1">Macos 安装 <a class="header-anchor" href="#macos-安装" aria-label="Permalink to &quot;Macos 安装&quot;">​</a></h2><p>〉 同样保证电脑上没有安装过 node 环境，且保证已安装了 git（可以参考使用XCode、使用brew、官网下载安装包）。 如果安装了 node，则彻底删除 <code>sudo rm -rf /usr/local/{bin/{node,npm},lib/node_modules/npm,lib/node,share/man/*/node.*}</code></p><ul><li>Mac <a href="https://github.com/nvm-sh/nvm" target="_blank" rel="noreferrer">nvm</a></li></ul><ol><li>下载 nvm 安装脚本<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash</span></span></code></pre></div>其中 v.0.39.0 是版本号，如果需要安装其他版本，可以替换 v0.39.0 为其他版本号 如果报错失败或连接不到远程，可以先在 host 文件中配置 <code>185.199.109.133 raw.githubusercontent.com</code> 正常安装成功后会自动在全局配置文件中配置好相应的环境变量，如果不可以的话在参考下面步骤 2、3手动配置环境变量</li><li>配置 .bash_profile<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>cd ~/.bash_profile</span></span></code></pre></div>然后将下面的配置信息输入到文件<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>export NVM_DIR=&quot;$HOME/.nvm&quot;</span></span>
<span class="line"><span>[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \\. &quot;$NVM_DIR/nvm.sh&quot;</span></span>
<span class="line"><span>[ -s &quot;$NVM_DIR/bash_completion&quot; ] &amp;&amp; \\. &quot;$NVM_DIR/bash_completion&quot;</span></span></code></pre></div>然后刷新环境变量<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>source ~/.bash_profile</span></span></code></pre></div></li><li>配置 .zshrc<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>cd ~/.zshrc</span></span></code></pre></div>然后将下面的配置信息输入到文件<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>export NVM_DIR=&quot;$HOME/.nvm&quot;</span></span>
<span class="line"><span>[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \\. &quot;$NVM_DIR/nvm.sh&quot;</span></span>
<span class="line"><span>[ -s &quot;$NVM_DIR/bash_completion&quot; ] &amp;&amp; \\. &quot;$NVM_DIR/bash_completion&quot;</span></span></code></pre></div>然后刷新环境变量<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>source ~/.zshrc</span></span></code></pre></div></li><li>查看 nvm 版本<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>nvm -v</span></span></code></pre></div></li><li>安装成功后就可正常安装 node<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>nvm install 18.17.0</span></span></code></pre></div></li></ol><h2 id="nvm-常用命令" tabindex="-1">nvm 常用命令 <a class="header-anchor" href="#nvm-常用命令" aria-label="Permalink to &quot;nvm 常用命令&quot;">​</a></h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>nvm list</td><td>查看已经安装的版本</td></tr><tr><td>nvm list installed</td><td>查看已经安装的版本</td></tr><tr><td>nvm list available</td><td>查看网络可以安装的版本</td></tr><tr><td>nvm install [version]</td><td>安装指定版本的node</td></tr><tr><td>nvm on</td><td>打开nodejs版本控制</td></tr><tr><td>nvm off</td><td>关闭nodejs版本控制</td></tr><tr><td>nvm proxy [url]</td><td>查看和设置代理</td></tr><tr><td>nvm node_mirror [url]</td><td>设置或者查看setting.txt中的node_mirror，如果不设置的默认是 <a href="https://nodejs.org/dist/" target="_blank" rel="noreferrer">https://nodejs.org/dist/</a></td></tr><tr><td>nvm npm_mirror [url]</td><td>设置或者查看setting.txt中的npm_mirror,如果不设置的话默认的是：<a href="https://github.com/npm/" target="_blank" rel="noreferrer">https://github.com/npm/</a></td></tr><tr><td>nvm uninstall</td><td>卸载指定的版本</td></tr><tr><td>nvm use [version]</td><td>切换指定的node版本</td></tr><tr><td>nvm root [path]</td><td>设置和查看root路径</td></tr><tr><td>nvm version</td><td>查看当前的版本</td></tr></tbody></table><h2 id="卸载" tabindex="-1">卸载 <a class="header-anchor" href="#卸载" aria-label="Permalink to &quot;卸载&quot;">​</a></h2><ol><li>先将本地的 node 卸载，删除包括<code>C:\\Users\\用户名</code>文件夹下的<code>.npmrc</code>和环境变量中 nvm 相关的配置</li><li>直接删除 nvm 安装目录</li></ol><h2 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h2><p>由于团队成员使用的 node 版本不同意或每个项目所要求的 node 版本不同，所以团队统一使用 nvm 来管理 node 的版本，这样只需要在每个项目根目录下创建 <code>.nvmrc</code> 文件，并写入当前项目需要的 node 版本号即可。</p><p>.nvmrc 文件示例：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>18.0.0</span></span></code></pre></div><p>当拉取了项目最新代码，在进行任何操作之前，先执行一次 <code>nvm use</code>，就会读取 <code>.nvmrc</code> 文件中的版本信息，并切换到相应的 node 版本,如果 <code>.nvmrc</code> 文件中的版本未安装，nvm 会尝试下载并安装该版本</p><blockquote><p>windows 版本的 nvm 不支持 .nvmrc 文件，所以使用 windows 的同学需要手动补充好完整版本，如执行 nvm use 14.20.1 来指定 node 版本。 <a href="https://github.com/coreybutler/nvm-windows/wiki/Common-Issues#why-isnt-nvmrc-supported-why-arent-some-nvm-for-macoslinux-features-supported" target="_blank" rel="noreferrer">点击查看具体原因</a></p></blockquote>`,24),d=[o];function i(p,l,c,r,m,h){return t(),s("div",null,d)}const g=e(a,[["render",i]]);export{u as __pageData,g as default};
